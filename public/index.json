[{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello World\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 go run main.go ","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign, it is just to indicate the command Hello World ","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign, it is just to indicate the command Hello, World! ","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! ","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.,\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names. For example: myVariableName.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 ","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(temperature) } ","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nConstants Constants are used to store constant data.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nConstants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switches Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switches Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switches Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switches int Integer numbers Ages, years, etc. Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switches int Whole numbers Ages, years, etc. Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. float Numbers with decimals Temperatures, weights, etc. Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. float Numbers with decimals Temperatures, weights, etc. string Text Names, addresses, etc. Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. float Numbers with decimals Temperatures, weights, etc. string Text Names, addresses, etc. rune Single unicode character Emojis, letters, etc. Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. float Numbers with decimals Temperatures, weights, etc. string Text Names, addresses, etc. rune Single unicode character Emojis, letters, etc. Constants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. float Numbers with decimals Temperatures, weights, etc. string Text Names, addresses, etc. rune Single unicode character Emojis, letters, etc. NOTE: Unicode is a standard that defines the characters that can be used in a computer. There are others (like ASCII) but Unicode is the most common and complete. Characters are represented by a number, called a code point, so we can use ints to store characters and vice versa.\nConstants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. float Numbers with decimals Temperatures, weights, etc. string Text Names, addresses, etc. rune Single unicode character Emojis, letters, etc. NOTE: Unicode is a standard that defines the characters that can be used in a computer. There are others (like ASCII) but Unicode is the most common and complete. Characters are represented by a number, called a code point, so we can use ints to store runes and vice versa.\nConstants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. float Numbers with decimals Temperatures, weights, etc. string Text Names, addresses, etc. rune Single unicode character Emojis, letters, etc. NOTE: Unicode is a standard that defines the characters that can be used in a computer. There are others (like ASCII) but Unicode is the most common and complete. Characters are represented by a number, called a code point, so we can use ints to store runes and vice versa.\nConstants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. float Numbers with decimals Temperatures, weights, etc. string Text Names, addresses, etc. rune Single unicode character Emojis, letters, etc. NOTE: Unicode is a standard that defines the characters that can be used in a computer. There are others (like ASCII) but Unicode is the most common and complete. Characters are represented by a number, called a code point, so we can use ints to store runes and vice versa.\nConstants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. float Numbers with decimals Temperatures, weights, etc. string Text Names, addresses, etc. rune Single unicode character Emojis, letters, etc. NOTE: Unicode is a standard that defines the characters that can be used in a computer. There are others (like ASCII) but Unicode is the most common and complete. Characters are represented by a number, called a code point, so we can use ints to store runes and vice versa.\nConstants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\nFor example, we can make a constant called PI with the value 3.141592653.\n","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"},{"content":"Go (Golang) is a very nice programming to learn for beginners.\nWhat is Go? Go is a programming language developed by Google in 2009. The syntax is similar to The C programming language.\nWhy Go? Its blazing fast. Its simple, easy to learn and minimal syntax make it a good choice for beginners. Getting started First, we need the following tools:\nGo A code editor (I use VSCode) Making a new project Let\u0026rsquo;s create a new project:\nJust go to a terminal, in your project folder and run:\n1 2 go mod init my-project touch main.go Or in Windows:\n1 2 go mod init my-project type nul \u0026gt; main.go This will create a go project (formally; a module) called my-project and make a main.go file.\nNow, let\u0026rsquo;s open the main.go file and write some code:\nMaking a simple Hello World program The first thing we are going to do is to print Hello World to the terminal.\nBefore we do that, we need to specify the package name.\nNOTE: A package is a collection of Go files that share information. It is a way to organize your code.\nThe first package to run is the main package.\nTo declare a package, we use the package keyword followed by the name of the package. So, we\u0026rsquo;ll add the following line to the top of our main.go file:\n1 package main Ok, now, we need to add more boilerplate code to the main.go file.\nNow, we need to import the fmt package.\nWARNING: When you import a package, you are using an external package.\nTo import a package, we use the import keyword followed by the name of the package in quotes (double or single).\nSo, we\u0026rsquo;ll add the following line bellow the package main line:\n1 import \u0026#34;fmt\u0026#34; Now, the last thing we need to do is to add the main function.\nA function is a block of code can be wrote once and executed multiple times. Even tough, the main function is the entry point of our program and is executed only once.\nTo declare a function, we use the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function.\nSo (finally), we\u0026rsquo;ll add the following line bellow the import \u0026quot;fmt\u0026quot; line:\n1 2 func main() { } Now, all full:\n1 2 3 4 5 6 package main import \u0026#34;fmt\u0026#34; func main() { } Ok, now, after we\u0026rsquo;ve added the boilerplate code, we can write actual code.\nLet\u0026rsquo;s use the fmt package to print Hello World to the terminal. fmt comes with the Println function that prints a string to the terminal and adds a new line at the end.\nBy the way, here the syntax of the Println function:\n1 fmt.Println(\u0026#34;\u0026lt;text in double/single quotes\u0026gt;\u0026#34;) So, we\u0026rsquo;ll add the following line bellow the func main() line:\n1 fmt.Println(\u0026#34;Hello World\u0026#34;) Now, here the full code:\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Line-by-line explanation We declare the main package with the package keyword followed by the name of the package. Remember, the main package is the entry point of our program.\nA blank line, it helps our code to be more readable.\nWe import the fmt package with the import keyword followed by the name of the package in quotes (double or single); fmt lets us do things with the terminal.\nAnother blank line, again, it helps our code to be more readable.\nWe declare the main function with the func keyword followed by the name of the function, parenthesis and curly brackets ({}) to delimit the code block used by the function. Remember, the main function is the entry point of our program and is executed only once.\nWe use the fmt package to print Hello World to the terminal with the Println function.\nWe close the main function with the } curly bracket.\nRunning the program To run the program, we need to compile it.\nLuckily, Go has a built-in tool to compile our code.\nTo compile a Go program, we use the go run command followed by the name of the file. So, we\u0026rsquo;ll run the following command in the terminal:\n1 2 $ go run main.go # NOTE: Don\u0026#39;t copy the $ sign Hello, World! Nice! Now, we have a working Go program.\nVariables Variables are used to store variable data (Use Constants for constant data).\nVariables are declared with the var keyword followed by the name of the variable and, optionally, the data type of the variable.\nPRO TIP: Use camelCase (first letter is lowercase, and the initial letter of each word is uppercase) for variable names so we can separate words. For example: myVariableName\nSo, delete all the code inside the main function and add the following line:\n1 var temperature = 24.3 Accessing variables To access a variable, we simply use its name as a number, text, or whatever the variable is used for.\nFor example, to print the value of the temperature variable, we can use the Println function:\n1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { var temperature = 24.3 fmt.Println(temperature) } This will print 24.3 to the terminal (as the variable\u0026rsquo;s value is 24.3).\nData types Go has a few data types; data types define what a variable can store.\nGo has every data type you would expect:\nData type Description Use cases bool True or false values Comparisons, on or off switche, etc int Whole numbers Ages, years, etc. float Numbers with decimals Temperatures, weights, etc. string Text Names, addresses, etc. rune Single unicode character Emojis, letters, etc. NOTE: Unicode is a standard that defines the characters that can be used in a computer. There are others (like ASCII) but Unicode is the most common and complete. Characters are represented by a number, called a code point, so we can use ints to store runes and vice versa.\nConstants Constants are used to store constant data. These have similarities with Variables, but they are declared with the const keyword.\nFor example, we can make a constant called PI with the value 3.141592653.\n1 const PI = 3.141592653 ","permalink":"http://localhost:1313/go_course/","summary":"Go course for begginers in backend - Part 1/3","title":"Go course for begginers in backend - Part 1/3"}]